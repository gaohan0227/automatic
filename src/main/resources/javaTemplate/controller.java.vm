package ${package.Controller};


#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

import ${cfg.responseInfo};
import ${cfg.query};
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.GetMapping;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;


#set($keyType = '')
#foreach($field in ${table.fields})
    #if(${field.keyFlag})
        #set($keyType = $field.propertyType)
    #end
#end

/**
 *
 * @author ${author}
 * @date ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
    private final Logger logger=LoggerFactory.getLogger(${table.controllerName}.class);

    @Autowired
    public ${table.serviceName} ${entity}Service;

    /**
     * 分页查询数据
     *
     * @param ${table.entityPath} 查询条件
     * @return
     */
    @ResponseBody
    @RequestMapping("/get${entity}PageList")
    public ${cfg.responseName} get${entity}List(${entity} ${table.entityPath},${cfg.queryName} ${cfg.queryParamName}){
        ${cfg.responseName} result=${cfg.responseName}.success();
        try{
            result.setData(${entity}Service.selectPage(${table.entityPath},${cfg.queryParamName}));
        }catch(Exception e){
            logger.error("get${entity}List -=- {}" ,e.toString());
            return result.systemError();
        }
        return result;
    }

    /**
     * 保存和修改公用的
     * @param ${table.entityPath} 传递的实体
     * @return 0 失败  1 成功
     */
    @ResponseBody
    @RequestMapping(method = RequestMethod.POST, value = "/${table.entityPath}Save")
    public ${cfg.responseName} ${table.entityPath}Save(${entity} ${table.entityPath}){
        try{
            return ${entity}Service.saveOrUpdate(${table.entityPath})?${cfg.responseName}.success():${cfg.responseName}.systemError();
        }catch(Exception e){
            logger.error("${table.entityPath}Save -=- {}" ,e.toString());
            return ${cfg.responseName}.systemError();
        }
    }

    /**
     * 根据id删除对象
     * @param id  实体ID
     * @return 0 失败  1 成功
     */
    @ResponseBody
    @RequestMapping(method = RequestMethod.POST, value = "/${table.entityPath}Delete")
    public ${cfg.responseName} ${table.entityPath}Delete(${keyType} id){
        try{
            return ${entity}Service.removeById(id)?${cfg.responseName}.success():${cfg.responseName}.systemError();
        }catch(Exception e){
            logger.error("${table.entityPath}delete -=- {}" ,e.toString());
            return ${cfg.responseName}.systemError();
        }
    }

    /**
    * 批量删除对象
    * @param ids 实体集合ID
    */
    @ResponseBody
    @RequestMapping(method = RequestMethod.POST, value = "/${table.entityPath}BatchDelete")
    public ${cfg.responseName} deleteBatchIds(String ids){
        try{
            List idList=Arrays.asList(ids.split(","));
            return ${entity}Service.removeByIds(idList)?${cfg.responseName}.success():${cfg.responseName}.systemError();
        }catch(Exception e){
            logger.error("${table.entityPath}BatchDelete -=- {}" ,e.toString());
            return ${cfg.responseName}.systemError();
        }
    }


}
